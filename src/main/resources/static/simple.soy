{namespace se.bjurr}


/**
 * @param config
 * @param errors
 */
{template .sbcc}
<div class="sbcc">
    <div class="aui-message aui-message-info">
        You can use <a target="_blank" href="http://jex.im/regulex/">http://jex.im/regulex/</a> to fiddle with regular expressions.<br>
        You may want some <a target="_blank" href="http://lmgtfy.com/?q=ascii+art">ASCII art</a> in accept and reject messages.<br>
        JQL functionality requires <a href="https://confluence.atlassian.com/display/BITBUCKET/Linking+Bitbucket+with+JIRA" target="_blank">JIRA application link</a> to be configured.<br>
        You can use variables in any field.<br>
        <ul>
            <li><b>&#36;&#123;BITBUCKET_EMAIL&#125;</b> Email of user in Bitbucket.</li>
            <li><b>&#36;&#123;BITBUCKET_NAME&#125;</b> Display name of user in Bitbucket.</li>
            <li><b>&#36;&#123;BITBUCKET_USER&#125;</b> Name of user in Bitbucket.</li>
            <li><b>&#36;&#123;BITBUCKET_USER_SLUG&#125;</b> Username of user in Bitbucket.</li>
            <li><b>&#36;&#123;COMMITTER_EMAIL&#125;</b> Email of committer name.</li>
            <li><b>&#36;&#123;COMMITTER_NAME&#125;</b> Name of committer email.</li>
            <li><b>&#36;&#123;AUTHOR_EMAIL&#125;</b> Email of author email.</li>
            <li><b>&#36;&#123;AUTHOR_NAME&#125;</b> Name of author name.</li>
        </ul>
    </div>

    {call aui.form.textField}
        {param id: 'branches' /}
        {param labelContent: 'Branches' /}
        {param value: $config['branches'] /}
        {param descriptionText: 'Regular expression to match branches that will be checked, leave empty to check all.' /}
        {param errorTexts: $errors ? $errors['branches'] : null /}
    {/call}

    <div class="sbcc fieldGroup">
        {call aui.form.textField}
            {param id: 'branchRejectionRegexp' /}
            {param labelContent: 'Check branch name' /}
            {param value: $config['branchRejectionRegexp'] /}
            {param descriptionText: 'Reject if branch name does not match this regexp, leave empty to allow all.' /}
            {param errorTexts: $errors ? $errors['branchRejectionRegexp'] : null /}
        {/call}

        {call aui.form.textareaField}
            {param id: 'branchRejectionRegexpMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['branchRejectionRegexpMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if branch name not matching regular expression.' /}
            {param errorTexts: $errors ? $errors['branchRejectionRegexpMessage'] : null /}
        {/call}
    </div>

    {call aui.form.checkboxField}
        {param legendContent: 'Exclude Merge Commits' /}
        {param fields: [[
            'id' : 'excludeMergeCommits',
            'labelText': 'yes',
            'isChecked' : $config['excludeMergeCommits']
        ]] /}
        {param descriptionText: 'Exclude merge commits from being checked.' /}
    {/call}
    
    {call aui.form.checkboxField}
        {param legendContent: 'Exclude Tags Commits' /}
        {param fields: [[
            'id' : 'excludeTagCommits',
            'labelText': 'yes',
            'isChecked' : $config['excludeTagCommits']
        ]] /}
        {param descriptionText: 'Exclude tag commits from being checked.' /}
    {/call}

    <div class="sbcc fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'Check pull requests' /}
            {param fields: [[
                'id' : 'shouldCheckPullrequests',
                'labelText': 'yes',
                'isChecked' : $config['shouldCheckPullrequests']
            ]] /}
            {param descriptionText: 'Check commits in pull requests. The hook may, for example, not be enabled in all forks. This will make sure commits are verified before they get merged with a pull request.' /}
        {/call}
    </div>

    {call aui.form.checkboxField}
        {param legendContent: 'Accept service users' /}
        {param fields: [[
            'id' : 'allowServiceUsers',
            'labelText': 'yes',
            'isChecked' : $config['allowServiceUsers']
        ]] /}
        {param descriptionText: 'Always accept commits from service users.' /}
    {/call}

    {call aui.form.textField}
        {param id: 'ignoreUsersPattern' /}
        {param labelContent: 'Ignore users' /}
        {param value: $config['ignoreUsersPattern'] /}
        {param rows: 3 /}
        {param descriptionText: 'Optional (leave empty to disable) regular expression to match against authenticated username. Checks will be ignored for user if pattern matches its name, like ^BATCH.* will ignore users with name starting with BATCH.' /}
        {param errorTexts: $errors ? $errors['ignoreUsersPattern'] : null /}
    {/call}
    
    <div class="sbcc fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Author Email' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorEmail',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingAuthorEmail']
            ]] /}
            {param descriptionText: 'Require that the commit authors email matches the Bitbucket users email.' /}
        {/call}
    
        {call aui.form.checkboxField}
            {param legendContent: 'Require Author Email in Bitbucket' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorEmailInBitbucket',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingAuthorEmailInBitbucket']
            ]] /}
            {param descriptionText: 'Require that author email exists for at least one user in Bitbucket.' /}
        {/call}
    
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Committer Email' /}
            {param fields: [[
                'id' : 'requireMatchingCommitterEmail',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingCommitterEmail']
            ]] /}
            {param descriptionText: 'Require that committers email matches the Bitbucket users email.' /}
        {/call}
    
        {call aui.form.textField}
            {param id: 'requireMatchingAuthorEmailRegexp' /}
            {param labelContent: 'Regular expression' /}
            {param value: $config['requireMatchingAuthorEmailRegexp'] /}
            {param rows: 3 /}
            {param descriptionText: 'Optional (leave empty to disable) regular expression to match against author email. Supports variables mentioned above.' /}
            {param errorTexts: $errors ? $errors['requireMatchingAuthorEmailRegexp'] : null /}
        {/call}
    
        {call aui.form.textareaField}
            {param id: 'requireMatchingAuthorEmailMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['requireMatchingAuthorEmailMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if above checks fail. Like: git config --global user.email user@name.com . Supports variables mentioned above.' /}
            {param errorTexts: $errors ? $errors['requireMatchingAuthorEmailMessage'] : null /}
        {/call}
    </div>

    <div class="sbcc fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Author Name' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorName',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingAuthorName']
            ]] /}
            {param descriptionText: 'Require that the commit authors name matches the Bitbucket users name.' /}
        {/call}

        {call aui.form.checkboxField}
            {param legendContent: 'Require Userslug Matching Author Name' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorNameSlug',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingAuthorNameSlug']
            ]] /}
            {param descriptionText: 'Require that the commit authors name matches the Bitbucket users slug.' /}
        {/call}
    
        {call aui.form.checkboxField}
            {param legendContent: 'Require Author Name in Bitbucket' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorNameInBitbucket',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingAuthorNameInBitbucket']
            ]] /}
            {param descriptionText: 'Require that author name exists for at least one user in Bitbucket.' /}
        {/call}
    
        {call aui.form.checkboxField}
            {param legendContent: 'Require Author Name As Userslug in Bitbucket' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorNameInBitbucketSlug',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingAuthorNameInBitbucketSlug']
            ]] /}
            {param descriptionText: 'Require that author name exists as user slug for at least one user in Bitbucket.' /}
        {/call}
    
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Committer Name' /}
            {param fields: [[
                'id' : 'requireMatchingCommitterName',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingCommitterName']
            ]] /}
            {param descriptionText: 'Require that committers name matches the Bitbucket users name.' /}
        {/call}

        {call aui.form.checkboxField}
            {param legendContent: 'Require Userslug Matching Committer Name' /}
            {param fields: [[
                'id' : 'requireMatchingCommitterNameSlug',
                'labelText': 'yes',
                'isChecked' : $config['requireMatchingCommitterNameSlug']
            ]] /}
            {param descriptionText: 'Require that the commit committer name matches the Bitbucket users slug.' /}
        {/call}
        
        {call aui.form.textareaField}
            {param id: 'requireMatchingAuthorNameMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['requireMatchingAuthorNameMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if above checks fail. Like: git config --global user.name "User Name" . Supports variables mentioned above.' /}
            {param errorTexts: $errors ? $errors['requireMatchingAuthorNameMessage'] : null /}
        {/call}
    </div>

    <div class="sbcc fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'Dry run' /}
            {param fields: [[
                'id' : 'dryRun',
                'labelText': 'yes',
                'isChecked' : $config['dryRun']
            ]] /}
            {param descriptionText: 'Dry run the plugin. The commits will be validated, and the committer will see the validation result, but the plugin will never actually reject any commit. This can be used when introducing the commit checker, there can be a dry run period of a few days so that committers will have time to learn how to adjust there commits.' /}
        {/call}
    
        {call aui.form.textareaField}
            {param id: 'dryRunMessage' /}
            {param labelContent: 'Dry run message' /}
            {param value: $config['dryRunMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Message to append to response, if in dry-run and commits are not successfully validating. This message could, for example, state a date when dry run will be disabled and the committs will actually have to be correct.' /}
            {param errorTexts: $errors ? $errors['dryRunMessage'] : null /}
        {/call}
    </div>

    {call aui.form.textareaField}
        {param id: 'rejectMessage' /}
        {param labelContent: 'Reject message' /}
        {param value: $config['rejectMessage'] /}
        {param rows: 5 /}
        {param descriptionText: 'Message to be shown to committer when push is rejected. Like a link to wiki page explaining how to work with "amend" and "rebase".' /}
        {param errorTexts: $errors ? $errors['rejectMessage'] : null /}
    {/call}

    {call aui.form.textareaField}
        {param id: 'acceptMessage' /}
        {param labelContent: 'Accept message' /}
        {param value: $config['acceptMessage'] /}
        {param rows: 5 /}
        {param descriptionText: 'Message to be shown to committer when push is accepted.' /}
        {param errorTexts: $errors ? $errors['acceptMessage'] : null /}
    {/call}
    
    <h3>Issue validation</h3>

    <div class="sbcc fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'JQL' /}
            {param fields: [[
                'id' : 'jqlCheck',
                'labelText': 'yes',
                'isChecked' : $config['jqlCheck']
            ]] /}
            {param descriptionText: 'Evaluate a JQL query and reject if it does not match at least one result.' /}
        {/call}
    
        {call aui.form.textField}
            {param id: 'commitRegexp' /}
            {param labelContent: 'REGEXP parameter' /}
            {param value: $config['commitRegexp'] /}
            {param descriptionText: 'Optional regular expression that is evaluated in the commit content. The value is available in the JQL query field as REGEXP variable. A Jira issue would match "\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\b".' /}
            {param errorTexts: $errors ? $errors['commitRegexp'] : null /}
        {/call}

        {call aui.form.textField}
            {param id: 'jqlCheckQuery' /}
            {param labelContent: 'Query' /}
            {param value: $config['jqlCheckQuery'] /}
            {param descriptionText: 'Reject the commit if there is not results for this query. You can use variables mentioned above and also the REGEXP variable if you entered a regexp above.' /}
            {param errorTexts: $errors ? $errors['jqlCheckQuery'] : null /}
        {/call}

        {call aui.form.textareaField}
            {param id: 'jqlCheckMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['jqlCheckMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Message to append to response, if JQL query does not match.' /}
            {param errorTexts: $errors ? $errors['jqlCheckMessage'] : null /}
        {/call}
    </div>

    <div class="issues">
        <div class="sbcc left">
            <div class="buttons">
                {call aui.form.input}
                    {param extraClasses: 'newGroup' /}
                    {param value: 'New rule group' /}
                    {param type: 'button' /}
                {/call}
            </div>
        </div>
        <div class="groups">
            {for $i in range(100)}
                {if $config['groupAccept['+$i+']']}
                    {call .group}
                        {param config: $config /}
                        {param errors: $errors /}
                        {param group: $i /}
                    {/call}
                {/if}
            {/for}
        </div>
    </div>
</div>
{/template}

/**
 * @param config
 * @param errors
 * @param group
 */
{template .group}
<div class="group fieldGroup" data-index="{$group}">
    <h4>Group #{$group}</h4>
    <div class="sbcc left">
        {call aui.form.input}
            {param extraClasses: 'removeGroup' /}
            {param value: 'Remove group' /}
            {param type: 'button' /}
        {/call}
    </div>
    {call aui.form.radioField}
        {param legendContent: 'Matching commits are' /}
        {param fields: [
          [ 'id' : 'groupAccept['+$group+']',
            'value': 'ACCEPT',
            'labelText': 'Accepted',
            'isChecked' : $config['groupAccept['+$group+']'] == 'ACCEPT'
            ],
          [ 'id' : 'groupAccept['+$group+']',
            'value': 'SHOW_MESSAGE',
            'labelText': 'Dont accept or reject. Just show configured message when any rule matches.',
            'isChecked' : $config['groupAccept['+$group+']'] == 'SHOW_MESSAGE'
            ]
        ] /}
        {param descriptionText: 'Any commit that is not accepted, will be rejected.' /}
    {/call}

    {call aui.form.radioField}
        {param legendContent: 'The group matches a commit if' /}
        {param fields: [
          [ 'id' : 'groupMatch['+$group+']',
            'value': 'ONE',
            'labelText': '1 rule matches',
            'isChecked' : $config['groupMatch['+$group+']'] == 'ONE'
            ],
          [ 'id' : 'groupMatch['+$group+']',
            'value': 'NONE',
            'labelText': 'no rules match',
            'isChecked' : $config['groupMatch['+$group+']'] == 'NONE'
            ],
          [ 'id' : 'groupMatch['+$group+']',
            'value': 'all',
            'labelText': 'all rules match',
            'isChecked' : $config['groupMatch['+$group+']'] == 'all'
            ]
        ] /}
    {/call}
    {call aui.form.textareaField}
        {param id: 'groupMessage['+$group+']' /}
        {param labelContent: 'Message' /}
        {param value: $config['groupMessage['+$group+']'] /}
        {param rows: 2 /}
        {param descriptionText: 'Message to to committer, explaining the group. Like "An issue needs to be specified" or "Dont mention \'fixing review comments\', mention what you actually changed instead."' /}
        {param errorTexts: $errors ? $errors['groupMessage['+$group+']'] : null /}
    {/call}
    <div class="sbcc left">
        {call aui.form.input}
            {param extraClasses: 'newRule' /}
            {param value: 'New rule' /}
            {param type: 'button' /}
        {/call}
    </div>
    <div class="rules">
        {for $g in range(100)}
            {for $r in range(100)}
                {if $config['ruleRegexp['+$g+']['+$r+']']}
                    {call .rule}
                        {param config: $config /}
                        {param errors: $errors /}
                        {param group: $g /}
                        {param rule: $r /}
                    {/call}
                {/if}
            {/for}
        {/for}
    </div>
</div>
{/template}

/**
 * @param config
 * @param errors
 * @param group
 * @param rule
 */
{template .rule}
<div class="sbcc rule" data-index="{$rule}">
    <h5>Group #{$group}, Rule #{$rule}</h5>
    <div class="buttons">
        {call aui.form.input}
            {param extraClasses: 'removeRule' /}
            {param value: 'Remove rule' /}
            {param type: 'button' /}
        {/call}
    </div>
    {call aui.form.textField}
        {param id: 'ruleRegexp['+$group+']['+$rule+']' /}
        {param value: $config['ruleRegexp['+$group+']['+$rule+']'] /}
        {param descriptionText: 'Regular expression to match commit message. A Jira issue would match "\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\b".' /}
        {param errorTexts: $errors ? $errors['ruleRegexp['+$group+']['+$rule+']'] : null /}
    {/call}
    {call aui.form.textField}
        {param id: 'ruleMessage['+$group+']['+$rule+']' /}
        {param value: $config['ruleMessage['+$group+']['+$rule+']'] /}
        {param descriptionText: 'Message to to committer, explaining the rule. Like "If this is just refactoring or fixing toggling test case, you can always use AB-1234."' /}
        {param errorTexts: $errors ? $errors['ruleMessage['+$group+']['+$rule+']'] : null /}
    {/call}
</div>
{/template}
